s_box = [  # Implement custom S-Box from paper: doi: 10.1016/j.protcy.2013.12.443
            [0x31, 0x2E, 0x04, 0xAB, 0xC6, 0x70, 0x91, 0x61, 0x19, 0x9F, 0xDC, 0x7D, 0xAD, 0x7F, 0xAC, 0xFF],
            [0x56, 0x82, 0xE8, 0x67, 0xA0, 0x43, 0xB2, 0x4A, 0x36, 0x08, 0x17, 0x22, 0xB8, 0x4F, 0x0E, 0xAE],
            [0xFE, 0xD6, 0x78, 0x95, 0xD9, 0x45, 0x0B, 0x96, 0x58, 0x3F, 0x8C, 0x55, 0x03, 0x92, 0xE0, 0x63],
            [0x18, 0x1F, 0x26, 0x00, 0x13, 0x9A, 0xE4, 0xDB, 0x44, 0x8B, 0x6C, 0x25, 0x81, 0x69, 0x1D, 0x27],
            [0x80, 0xE9, 0xE7, 0x5A, 0x3E, 0x0C, 0xAF, 0x7E, 0x2C, 0x05, 0x2B, 0x3C, 0x0D, 0x2F, 0x84, 0x51],
            [0xBB, 0xCE, 0x74, 0x29, 0x3D, 0x8D, 0xD5, 0xF9, 0xEF, 0x5E, 0x86, 0x50, 0x3B, 0x34, 0x09, 0x97],
            [0xD8, 0xC5, 0xF1, 0xEB, 0xE6, 0xDA, 0xC4, 0x71, 0x11, 0x9B, 0x64, 0x21, 0x39, 0x35, 0x89, 0x6D],
            [0xA5, 0x7B, 0x14, 0xA3, 0xC2, 0xC8, 0xCD, 0xF5, 0x53, 0xBA, 0x4E, 0x8E, 0x54, 0x83, 0x68, 0x9D],
            [0xDD, 0xFD, 0x57, 0x02, 0x12, 0x1A, 0x1E, 0xA6, 0xFA, 0x6E, 0x24, 0x01, 0x93, 0x60, 0x99, 0x65],
            [0xA1, 0xC3, 0x48, 0x37, 0x88, 0xED, 0x5F, 0x06, 0xAA, 0x46, 0x8A, 0xEC, 0xDF, 0xFC, 0xD7, 0xF8],
            [0x6F, 0xA4, 0xFB, 0xEE, 0xDE, 0x7C, 0x2D, 0x85, 0xD1, 0x41, 0xB3, 0xCA, 0xCC, 0x75, 0xA9, 0xC7],
            [0xF0, 0x6B, 0x1C, 0xA7, 0x7A, 0x94, 0x59, 0xBF, 0x76, 0x28, 0xBD, 0x77, 0xA8, 0x47, 0x0A, 0x16],
            [0xA2, 0x42, 0x32, 0xB0, 0x4B, 0xB6, 0xF2, 0x6A, 0x9C, 0x5D, 0x07, 0x2A, 0xBC, 0xF7, 0x52, 0x3A],
            [0xB4, 0xF3, 0xEA, 0x66, 0x20, 0xB9, 0xCF, 0xF4, 0xD3, 0x40, 0x33, 0x30, 0xB1, 0xCB, 0x4C, 0x8F],
            [0xD4, 0x79, 0x15, 0x23, 0x38, 0xB5, 0x73, 0x10, 0x1B, 0x9E, 0x5C, 0x87, 0xD0, 0xC1, 0x49, 0xB7],
            [0x72, 0x90, 0xE1, 0xE3, 0xE2, 0x62, 0x98, 0xE5, 0x5B, 0xBE, 0xF6, 0xD2, 0xC0, 0xC9, 0x4D, 0x0F]
]
inv_s_box = []

"""
Each item in the inverse s-box must be the index of the corresponding item in the s-box

For example, if 0xBB is in the s-box at position (0, 0), then 0x00 must be in the inverse s-box at position (0, 0)
The first character of the byte is the row, the second character is the column
Inverse S-box must also follow 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F form.
"""

for i in range(16):
    inv_s_box.append([0] * 16)

for i in range(16):
    for j in range(16):
        inv_s_box[s_box[i][j] // 16][s_box[i][j] % 16] = i * 16 + j
        # Convert to 0x notation
        inv_s_box[s_box[i][j] // 16][s_box[i][j] % 16] = hex(inv_s_box[s_box[i][j] // 16][s_box[i][j] % 16])
        """
        the X should be lowercase, but all alphabet characters are uppercase in the s-box
        also, keep all zeroes in the beginning. Don't shorten to 0xF, keep it as 0x0F
        """

print(inv_s_box)


# Test the s-box and inverse s-box
def test_sbox():
    for i in range(16):
        for j in range(16):
            assert s_box[i][j] == int(inv_s_box[s_box[i][j] // 16][s_box[i][j] % 16], 16)
            assert inv_s_box[i][j] == int(s_box[inv_s_box[i][j] // 16][inv_s_box[i][j] % 16], 16)
